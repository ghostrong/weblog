{
  "name": "Eblog",
  "tagline": "The easiest blog program with python.",
  "body": "eBlog\r\n======\r\n\r\nA simple blog system based on [Flask](http://flask.pocoo.org/)\r\n\r\n\r\nQuick Start\r\n-----------\r\n\r\n````\r\n$ git clone https://github.com/ghostrong/weblog.git\r\n$ cd weblog\r\n$ pip install -r requirements.txt\r\n$ python create_db.py\r\n$ python run.py (also you can run shell with: sh start.sh)\r\n````\r\n\r\nNow, visit `http://127.0.0.1:5000` in a browser.\r\n\r\nDatabase with MySQL\r\n-------------------\r\nIf you use MySQL ,create weblog database before ```python create_db.py```:\r\n\r\n* Set **SQLALCHEMY_DATABASE_URI** in config.py\r\n* Login MySQL and execute script ```create schema weblog charset utf8;```\r\n* python create_db.py\r\n\r\nRequirements\r\n------------\r\n\r\n#### For the server-side\r\n\r\n* Flask\r\n* Flask-SQLAlchemy\r\n* itsdangerous\r\n* Jinja2\r\n* Markdown\r\n* MarkupSafe\r\n* SQLAlchemy\r\n* Werkzeug\r\n\r\n#### For the cline-side (for publishing articles automatically)\r\n\r\n* requests\r\n* lxml\r\n* PyYAML\r\n* Markdown\r\n\r\n\r\nWriting blogs\r\n-------------\r\n\r\nYou should write articles in [markdown](http://daringfireball.net/projects/markdown/), and provide the meta information such as title, tags in [YAML](http://yaml.org/). You should put the meta data in the header lines of the markdown file. Here is an [example](https://raw.githubusercontent.com/ghostrong/weblog/master/example.md).\r\n\r\n#### Meta Data\r\n\r\n* **title**\r\n\r\n  You must give the title the the blog. e.g.,\r\n\r\n  ````\r\n  title: The Zen of Python\r\n  ````\r\n\r\n* **summary** (optional)\r\n\r\n  It's the abstract of the article. If you ignore it, the publish helper will generate the\r\n  summary snippet from the body automatically. e.g.,\r\n\r\n  ````\r\n  summary:\r\n    Long time Pythoneer Tim Peters succinctly channels the BDFL's\r\n    guiding principles for Python's design into 20 aphorisms, only 19\r\n    of which have been written down.\r\n  ````\r\n\r\n* **pub_time** (optional)\r\n\r\n  You can define the publish datetime manually. Or, the system will assign the current\r\n  datetime. The default format is \"%Y-%m-%d %H:%M:%S\" (such as \"2015-06-06 12:40:10\").\r\n  You could define the time string format by the value of *TIME_FORMAT* in\r\n  [config.py](config.py),\r\n  and you should conform to the\r\n  [format codes](https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior). e.g.,\r\n\r\n  ````\r\n  pub_time: 2015-06-06 12:40:10\r\n  ````\r\n\r\n* **tags** (optional)\r\n\r\n  It's useful to assign tags to an article. The value type should be list in YAML. e.g.,\r\n\r\n  ````\r\n  tags:\r\n    - python\r\n    - programming\r\n  ````\r\n\r\n#### The boundry of meta\r\n\r\nThe meta data should be located between '---' and '...'.\r\nThe following is an example of meta infomration:\r\n\r\n````\r\n---\r\ntitle: The Zen of Python\r\nsummary:\r\n  Long time Pythoneer Tim Peters succinctly channels the BDFL's\r\n  guiding principles for Python's design into 20 aphorisms, only 19\r\n  of which have been written down.\r\ntags:\r\n  - python\r\n  - programming\r\n...\r\n\r\nYou should write the body content from here...\r\n````\r\n\r\n\r\nPublishing blogs\r\n----------------\r\n\r\nWe provide a simple script to make the publishing work easy. Run `publish.py` to check the help message.\r\n\r\n````\r\n$ python publish\r\n\r\nusage: publish.py [-h] [-p PATH] [-a API] [-t TOKEN]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -p PATH, --path PATH  markdown file path/url\r\n  -a API, --api API     api address\r\n  -t TOKEN, --token TOKEN\r\n                        access token\r\n````\r\n\r\nYou should provide the markdown file(either file-path or raw-url), the target api, and the access token. In this blog system, the publish url is `/publish`. The access token is the value of *TOKEN* in [config.py](config.py). \r\n**Anyone who know the token could publish articles to your blog system, so keep it secret!!**\r\n\r\nAfter starting the web server locally, you can publish an article like this:\r\n*You should be change your token in config.py file.\r\n\r\n````\r\n$ python publish.py -a http://127.0.0.1:5000/publish -p example.md -t your_token_in_config\r\n````\r\n\r\nDeploy application\r\n------------------\r\ngunicorn -w 4 -b 0.0.0.0:5000 run:app\r\n\r\nDelete blogs\r\n------------\r\n```\r\nfrom weblog import database,models\r\ndb = database.db\r\narticles=models.Article\r\narticles.query.filter_by(id=1).delete()\r\ndb.session.commit()\r\n```\r\nFeatures\r\n--------\r\n* Writing blogs in Markdown and YAML\r\n* Browsing blogs by PAGE or TAG\r\n* Neat templates :-)\r\n* Search (TBD)\r\n\r\n\r\nTODO\r\n----\r\n* Keyword-based Search\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}